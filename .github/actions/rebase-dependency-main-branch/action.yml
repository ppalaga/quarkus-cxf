name: rebase-dependency-main-branch
description: 'Rebase a maintenenance branch such as quarkus-main or cxf-main, rebuild it and report the status in a dedicated issue'

inputs:
  java-version:
    description: 'Java version'
    required: true
  dependency-git-repo-url:
    description: "The URL of the dependency's git repository to checkout and build from"
    required: true
  dependency-short-name:
    description: "The short lower case name of the dependency as quarkus or cxf"
    required: true
  dependency-branch:
    description: "The name of the dependency branch to build against, such as main or 3.15"
    required: true
    default: main
  own-maintenance-branch:
    description: "The name of the maintenance branch in the current git repository to rebase on top of, such as main or 3.15"
    required: true
    default: main
  issue-id:
    description: "The issue number where to report any rebase or build issues"
    required: true
  token:
    description: "The token to use to authenticate against GitHub API"
    required: true

outputs:
  dependency-commit:
    description: "The SHA1 of the branch specified in inputs.dependency-branch against which the current build was run"
    value: ${{ steps.rebuild-dependency.outputs.dependency-commit }}
  dependency-version:
    description: "The version of the dependency as present in the top pom.xml of its main branch"
    value: ${{ steps.rebuild-dependency.outputs.dependency-version }}
  upgrade-message:
    description: "The message of the commit upgrading the dependency version"
    value: ${{ steps.set-version.outputs.upgrade-message }}
  exit-status:
    description: |
      A short string describing how the execution went. 
      It can be one of the following:
        * success
        * rebase-failed
        * dependency-build-failed
    value: ${{ env.REBASE_DEPENDENCY_MAIN_EXIT_STATUS }}

runs:
  using: 'composite'
  steps:

    - name: Set up JDK ${{ inputs.java-version }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ inputs.java-version }}

    - name: rebase ${{ inputs.dependency-short-name }}-main
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        echo "REBASE_DEPENDENCY_MAIN_EXIT_STATUS=success" >> $GITHUB_ENV
        git fetch origin ${{ inputs.own-maintenance-branch }}
        git checkout ${{ inputs.own-maintenance-branch }}
        git reset --hard origin/${{ inputs.own-maintenance-branch }}
        git fetch origin ${{ inputs.dependency-short-name }}-${{ inputs.dependency-branch }}
        git checkout ${{ inputs.dependency-short-name }}-${{ inputs.dependency-branch }} >/dev/null 2>&1 || git checkout -b ${{ inputs.dependency-short-name }}-${{ inputs.dependency-branch }} origin/${{ inputs.own-maintenance-branch }}
        git status
        echo "${{ inputs.dependency-short-name }}-${{ inputs.own-maintenance-branch }} is at $(git rev-parse HEAD)"
        git rebase ${{ inputs.own-maintenance-branch }}
        rebaseExitCode=$?
        echo "rebaseExitCode = $rebaseExitCode"
        exit $rebaseExitCode

    - name: Reopen or comment on issue https://github.com/${{ github.repository }}/issues/${{ inputs.issue-id }}
      if: ${{ failure() }}
      shell: bash
      run: |
        echo "REBASE_DEPENDENCY_MAIN_EXIT_STATUS=rebase-failed" >> $GITHUB_ENV
        oldState=$(gh issue view ${{ inputs.issue-id }} --json state -q .state -R ${{ github.repository }})
        echo "oldState = $oldState"
        msg="❌ Could not rebase ${{ inputs.dependency-short-name }}-${{ inputs.own-maintenance-branch }} in ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        if [[ "$oldState" == "OPEN" ]] ; then
          gh issue comment \
            --repo ${{ github.repository }} \
            --body "$msg" \
            ${{ inputs.issue-id }}
        else
          gh issue reopen \
            --repo ${{ github.repository }} \
            --comment "$msg" \
            ${{ inputs.issue-id }}
        fi
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: Rebuild ${{ inputs.dependency-git-repo-url }}
      uses: ./.github/actions/rebuild-dependency
      id: rebuild-dependency
      with:
        dependency-git-repo-url: ${{ inputs.dependency-git-repo-url }}
        dependency-short-name: ${{ inputs.dependency-short-name }}
        issue-id: ${{ inputs.issue-id }}
        token: "${{ inputs.token }}"

    - name: Show steps.rebuild-dependency.outputs.exit-status
      shell: bash
      run: |
        echo "steps.rebuild-dependency.outputs.exit-status: ${{ steps.rebuild-dependency.outputs.exit-status }}"

    - name: Set status
      if: ${{ failure() && steps.rebuild-dependency.outputs.exit-status == 'dependency-build-failed' }}
      shell: bash
      run: |
        echo "REBASE_DEPENDENCY_MAIN_EXIT_STATUS=dependency-build-failed" >> $GITHUB_ENV

    - name: Set ${{ inputs.dependency-short-name }}.version to ${{ steps.rebuild-dependency.outputs.dependency-version }}
      shell: bash
      id: set-version
      run: |
        upgradeMessage="Upgrade ${{ inputs.dependency-short-name }}.version to ${{ steps.rebuild-dependency.outputs.dependency-version }}"
        echo "upgrade-message=$(echo "$upgradeMessage")" >> $GITHUB_OUTPUT
        echo "pom.xml before:"
        cat pom.xml | head -n 50
        echo "Setting ${{ inputs.dependency-short-name }}.version = ${{ steps.rebuild-dependency.outputs.dependency-version }}"
        sed -i 's|<${{ inputs.dependency-short-name }}.version>[^<]*</${{ inputs.dependency-short-name }}.version>|<${{ inputs.dependency-short-name }}.version>${{ steps.rebuild-dependency.outputs.dependency-version }}</${{ inputs.dependency-short-name }}.version>|' pom.xml
        echo "pom.xml after:"
        cat pom.xml | head -n 50
        echo "git status before cq:sync-versions"
        git status
        if [ -n "$(git status --porcelain)" ]; then
          echo "The ${{ inputs.dependency-short-name }}.version change needs to get committed"
          ./mvnw cq:sync-versions -Dcq.simpleElementWhitespace=AUTODETECT_PREFER_SPACE -N -ntp
          git add -A
          echo "git status before commit"
          git status
          git commit -m "$upgradeMessage"
        else
          echo "The ${{ inputs.dependency-short-name }}.version change was already committed"
          ./mvnw cq:sync-versions -Dcq.simpleElementWhitespace=AUTODETECT_PREFER_SPACE -N -ntp
          if [ -n "$(git status --porcelain)" ]; then
            echo "./mvnw cq:sync-versions caused changes"
            git add -A
            echo "git status before commit"
            git status
            git commit -m "Re-run mvn cq:sync-versions"
          fi
        fi
        echo "git status after commit"
        git status
