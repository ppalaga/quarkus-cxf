name: rebuild-dependency
description: 'Checkout and build a dependency such as CXF or Quarkus. Java must be setup before running this action.'

inputs:
  dependency-git-repo-url:
    description: "The URL of the dependency's git repository to checkout and build from"
    required: true
  dependency-short-name:
    description: "The short lower case name of the dependency as quarkus or cxf"
    required: true
  issue-id:
    description: "The issue number where to report the build failure"
    required: false
    default: ''
  token:
    description: "The token to use to authenticate against GitHub API"
    required: false

outputs:
  dependency-commit:
    description: "The SHA1 of the dependency main branch"
    value: ${{ steps.set-outputs.outputs.dependency-commit }}
  dependency-version:
    description: "The version of the dependency as present in the top pom.xml of its main branch"
    value: ${{ steps.set-outputs.outputs.dependency-version }}
  exit-status:
    description: |
      A short string describing how the execution went. 
      It can be one of the following:
        * success
        * dependency-build-failed
    value: ${{ env.REBUILD_DEPENDENCY_EXIT_STATUS }}

runs:
  using: 'composite'
  steps:

    - name: Install xmllint
      shell: bash
      run: |
        sudo apt-get -qq install -y libxml2-utils

    - name: Checkout ${{ inputs.dependency-git-repo-url }}
      id: checkout-dependency
      shell: bash
      run: |
        cd ~
        if [[ ! -d "${{ inputs.dependency-short-name }}" ]] ; then
          # the dependency might have been build already
          git clone --quiet --depth 1 --branch main ${{ inputs.dependency-git-repo-url }}
          cd "${{ inputs.dependency-short-name }}"
          echo "Current ${{ inputs.dependency-short-name }} commit:" $(git rev-parse HEAD)
          if [[ "${{ inputs.dependency-short-name }}" == "quarkus" ]] ; then
            sed -i '/<module>integration-tests<\/module>/d' pom.xml
          fi
          mvn=$([[ -f ./mvnw ]] && echo "./mvnw" || echo "mvn")
          "$mvn" clean install -DskipTests -ntp -Dcheckstyle.skip -Dquickly
          if [[ "${{ inputs.dependency-short-name }}" == "quarkus" ]] ; then
            "$mvn" install -DskipTests -ntp -Prelease -f independent-projects/resteasy-reactive/server/vertx/pom.xml -Dno-build-cache -Dgpg.skip
          fi
        fi

    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        cd ~/${{ inputs.dependency-short-name }}
        echo "dependency-commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "dependency-version=$(xmllint --xpath "/*[local-name() = 'project']/*[local-name() = 'version']/text()" pom.xml)" >> $GITHUB_OUTPUT
        echo "REBUILD_DEPENDENCY_EXIT_STATUS=success" >> $GITHUB_ENV

    - name: Set status
      if: ${{ failure() }}
      shell: bash
      run: |
        echo "REBUILD_DEPENDENCY_EXIT_STATUS=dependency-build-failed" >> $GITHUB_ENV

    - name: Reopen or comment on issue https://github.com/${{ github.repository }}/issues/${{ inputs.issue-id }}
      if: ${{ failure() && inputs.issue-id != '' }}
      shell: bash
      run: |
        echo "REBASE_DEPENDENCY_MAIN_EXIT_STATUS=rebase-failed" >> $GITHUB_ENV
        oldState=$(gh issue view ${{ inputs.issue-id }} --json state -q .state -R ${{ github.repository }})
        echo "oldState = $oldState"
        gitUrl="${{ inputs.dependency-git-repo-url }}"
        commitUrl="${gitUrl/.git/}/commit/${{ steps.checkout-dependency.outputs.dependency-commit }}"
        msg="‚ùå Could not build ${{ inputs.dependency-short-name }} at ${commitUrl} in ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        if [[ "$oldState" == "OPEN" ]] ; then
          gh issue comment \
            --repo ${{ github.repository }} \
            --body "$msg" \
            ${{ inputs.issue-id }}
        else
          gh issue reopen \
            --repo ${{ github.repository }} \
            --comment "$msg" \
            ${{ inputs.issue-id }}
        fi
      env:
        GH_TOKEN: ${{ inputs.token }}
