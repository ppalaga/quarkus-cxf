package io.quarkiverse.cxf.deployment.test;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;

import javax.xml.namespace.QName;

import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 4.0.5
 * 2024-11-15T12:48:45.544+01:00
 * Generated source version: 4.0.5
 *
 */
@WebServiceClient(name = "HelloService", wsdlLocation = "file:/home/ppalaga/orgs/cxf/qcxf/integration-tests/async-vertx-client/src/main/resources/wsdl/HelloService.wsdl", targetNamespace = "http://test.deployment.cxf.quarkiverse.io/")
public class HelloService_Service extends Service {

    public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("http://test.deployment.cxf.quarkiverse.io/", "HelloService");
    public static final QName HelloServiceImplPort = new QName("http://test.deployment.cxf.quarkiverse.io/",
            "HelloServiceImplPort");
    static {
        URL url = null;
        try {
            url = URI.create(
                    "file:/home/ppalaga/orgs/cxf/qcxf/integration-tests/async-vertx-client/src/main/resources/wsdl/HelloService.wsdl")
                    .toURL();
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(HelloService_Service.class.getName())
                    .log(java.util.logging.Level.INFO,
                            "Can not initialize the default wsdl from {0}",
                            "file:/home/ppalaga/orgs/cxf/qcxf/integration-tests/async-vertx-client/src/main/resources/wsdl/HelloService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public HelloService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public HelloService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public HelloService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }

    public HelloService_Service(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public HelloService_Service(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public HelloService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *         returns HelloService
     */
    @WebEndpoint(name = "HelloServiceImplPort")
    public HelloService getHelloServiceImplPort() {
        return super.getPort(HelloServiceImplPort, HelloService.class);
    }

    /**
     *
     * @param features
     *        A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in the
     *        <code>features</code> parameter will have their default values.
     * @return
     *         returns HelloService
     */
    @WebEndpoint(name = "HelloServiceImplPort")
    public HelloService getHelloServiceImplPort(WebServiceFeature... features) {
        return super.getPort(HelloServiceImplPort, HelloService.class, features);
    }

}
